from keras.models import Sequential
from keras.layers import Reshape, Conv2D, MaxPool2D, Flatten, Dense
import pandas as pd
import numpy as np

training_data = pd.read_csv("train.csv")
testing_data = pd.read_csv("test.csv")

testing_images = np.array(testing_data)

(train_images, train_labels) = (np.array(training_data.iloc[:21000, 1:]), np.array(training_data.iloc[:21000, 0]))
(test_images, test_labels) = (np.array(training_data.iloc[21000:, 1:]), np.array(training_data.iloc[21000:, 0]))
(train_images, test_images) = (train_images/255.0, test_images/255.0)

model = Sequential()
model.add(Reshape(input_shape=(784,), target_shape=(28, 28, 1)))
model.add(Conv2D(kernel_size=(3, 3), filters=32, activation="relu"))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation="relu"))
model.add(Dense(10, activation="softmax"))
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

model.fit(train_images, train_labels, batch_size=64, epochs=25, validation_split=0.1)

test_loss, test_accuracy = model.evaluate(test_images, test_labels)
print(f"Test Accuracy: {test_accuracy} \t Test Loss: {test_loss}")

predictions = model.predict(testing_images)

image_ids = []
predicted_labels = []
for i in range(len(predictions)):
    image_ids.append(i + 1)
    predicted_labels.append(np.argmax(predictions[i]))
df = pd.DataFrame({"ImageId": image_ids, "Label": predicted_labels})
df.to_csv("submission.csv", index=False)
